name: Build and Deploy WiseCard Backend

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: cardmates/wisecard_backend

jobs:
  build-and-push:
#    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          latest

# 빌드된 이미지 GitHub Container Registry(ghcr.io)에 푸시
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}

    - name: Verify image push
      run: |
        docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker images | grep ${{ env.IMAGE_NAME }}


  deploy:
#    needs: [test, build-and-push]
    needs: [build-and-push]
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # EC2 서버에서 실행할 배포 스크립트
          cd /home/ubuntu/WiseCard_Backend
          
          # Docker 레지스트리 로그인 (PAT은 안전하게 관리)
          echo "$GHCR_PAT" | docker login ghcr.io -u juanxiu --password-stdin
  

  # 최신 코드 가져오기
          git fetch origin
          git reset --hard origin/main
          
          # 환경변수 파일 업데이트
          cat > .env << EOF
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME=db-wisecard
          DB_USERNAME=admin
          DB_PASSWORD=${{secrets.DB_PASSWORD}}
          DB_PORT=3306
          REDIS_HOST=redis-wisecard
          REDIS_PORT=6379
          REDIS_PASSWORD=
          APP_API_KAKAO_KEY=${{ secrets.APP_API_KAKAO_KEY }}
          APP_PORT=8080
          GRPC_PORT=9091
          EOF
          
          # Docker 이미지 풀 및 데몬 시작 
          docker-compose down
          docker-compose pull || { echo "docker-compose pull failed"; exit 1; }
          docker-compose up -d || { echo "docker-compose up failed"; exit 1; }
  

  # 헬스체크 (최대 5분 대기)
          echo "헬스체크 시작..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "애플리케이션이 정상적으로 시작되었습니다."
              break
            fi
            echo "헬스체크 시도 $i/30 - 대기 중..."
            sleep 10
          done
          
          # 최종 헬스체크
          if ! curl -f http://localhost:8080/actuator/health; then
            echo "배포 실패 - 롤백을 시도합니다."
            docker-compose down
            docker-compose up -d
            exit 1
          fi
          
          # 불필요한 이미지 정리
          docker image prune -f
          
          echo "배포가 성공적으로 완료되었습니다!"
